The trie insert operation would cost O(n * m) where n is the number of characters in the input word and m is the number of characters that could follow an input character from the word (The characters in the children dictionary in TrieNode). However, there are 26 letters in English so the m could be at maximum 26. O(n * 26) = O(n). Therefore, we can say that the overall time complexity is O(n). The space complexity would be O(n) where n is the number of characters in the input word since we have to store each character of the word in memory.

The trie find operation would also cost O(n * m) where n is the number of characters in the input prefix and the m is the number of characters that could follow a character from the prefix. Since m is limited to 26 characters (the reason is explained in the paragraph above), the overall complexity would be O(n * 26) = O(n). The space complexity would be O(1) since I'm just going through one character at a time.

The trie suffix operation would cost O(m^2) where m is the number of characters available for a given prefix. I'm iterating m times, and for each iteration, I'm recursively calling suffixes operation m times. That's the reason the overall operation would cost O(m^2). The space complexity would be O(n) where n is the number of complete words under given a prefix. 
