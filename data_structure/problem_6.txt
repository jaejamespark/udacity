Each of union and intersection method would take time complexity of O(n+m) where n is the number of nodes in linkedlist1 and m is the number of nodes in linkedlist2. I'm going through the two lists once and count the number of occurance of each value in the linkedlists using a dictionary (hash map). Updating the dictionary would cost O(1) in average since it's a look up using a key then updating a value.

The space complexity of union and intersection would be O(n+m) each since I would need to store all the values in linkedlist1 and linkedlist2 in a dictionary to count the frequency of the value. (I mentioned what each n and m are in the previous paragraph.)
