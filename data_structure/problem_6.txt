To find intersection between two linkedlists, I have to compare each element in linkedlist1 to all the elements in the linkedlist2. Once I find the common one, additionally, I have to compare the common one to every elements in result linkedlist to avoid inserting any duplicates. This intersection operation will require O(the number of elements in linkedlist1 * the number of elements in linkedlist2 * the number of elements in both linkedlist 1 and linkedlist 2) in time complexity. For space complexity, it will requires O(the total number of elements in linkedlist1, linkedlist2, and result linkedlist) to do the comparsion and to store the result.

The union operation first finds unique elements in linkedlist1. This requires O(number of elements in linkedlist1 * number of unique elements in linkedlist1). Once the unique elements in the linkedlist1 are found, every elements in linkedlist2 are compared to the unique elements. This operation costs O(number of unique elements in linkedlist1 * number of elements in linkedlist2). The overall time complexity is O(the total number of elements in linkedlist1 and linkedlist2). The space complexity would be O(number of elements in linkedlist1 + number of elements in linkedlist2 + number of unique elements in linkedlist1 and linkedlist2) to do the comparsion and to store the result.
